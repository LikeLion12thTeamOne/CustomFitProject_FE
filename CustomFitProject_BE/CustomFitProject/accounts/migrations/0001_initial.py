# Generated by Django 5.0.7 on 2024-07-28 11:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('terms_accepted_1', models.BooleanField(default=False)),
                ('terms_accepted_2', models.BooleanField(default=False)),
                ('terms_accepted_optional', models.BooleanField(default=False)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10, null=True)),
                ('age', models.CharField(choices=[('under_19', '19세 이하'), ('20-29', '20~29세'), ('30-39', '30~39세'), ('40-49', '40~49세'), ('50-59', '50~59세'), ('60-69', '60~69세'), ('over_70', '70 이상')], max_length=100, null=True)),
                ('disease', models.CharField(blank=True, choices=[('diabetes', '당뇨'), ('muscle_loss', '근손실'), ('obesity', '비만'), ('hypertension', '고혈압')], max_length=100, null=True)),
                ('height', models.CharField(choices=[('under_149', '149 cm 이하'), ('150-154', '150~154 cm'), ('155-159', '155~159 cm'), ('160-164', '160~164 cm'), ('165-169', '165~169 cm'), ('170-174', '170~174 cm'), ('175-179', '175~179 cm'), ('over_180', '180 cm 이상')], max_length=100, null=True)),
                ('weight', models.CharField(choices=[('under_39', '39kg 이하'), ('40-44', '40~44kg'), ('45-49', '45~49kg'), ('50-54', '50~54kg'), ('55-59', '55~59kg'), ('60-64', '60~64kg'), ('65-69', '65~69kg'), ('70-74', '70~74kg'), ('75-79', '75~79kg'), ('80-84', '80~84kg'), ('85-89', '85~89kg'), ('90-94', '90~94kg'), ('95-99', '95~99kg'), ('over_100', '100kg 이상')], max_length=100, null=True)),
                ('average_rating', models.FloatField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
